@startuml 流程图
start
:初始化;
:创建看门狗线程;
fork
    #00FF00:while(1);
    note right
    看门狗线程
    end note
    repeat
    if(>2min没喂狗) then (Y)
        #8EE5EE:取消点;
    endif
    :sleep(5);
    repeat while(1)   
fork again
    #HotPink:while(1);
    note left
    a线程
    end note
    repeat
        if (注册标志==1) then (Y)
            :喂狗;
        else (N)
        endif
        :db;
        if(检测成功?) then (Y)
            #A020F0:获取;
            note left
            根据
            end note
            if(有d? && 未?) then (Y)
                :clear;
                note left
                clear共干了4件事
                ====
                * 1.kill
                * 2.set !!!
                * 3.set global  
                * 4.stop
                end note
                if(c_m成功?) then (Y)
                    :调m脚本;
                    note left
                    脚本在这里调用的
                    end note
                    if(调用成功?) then (Y)
                        #A020F0:修改DONE_SUCCESS;
                    else (N)
                        #A020F0:修改DONE_FAIL;
                    endif
                else (N)
                    #HotPink:goto while(1);
                    detach
                endif
            else (N)
            endif
                if(注册标志==0 && >60) then(Y)
                      #8EE5EE:注册;
                      :标志=1;
                else (N)
                endif
                :10min更新一次;
                note left
                1.保存master机器
                否则……
                2.实例的，
                所以去除……
                end note
                :10min运行一次;
          else (N)
                #A020F0:获取d;
                if(有d?) then (Y)
                      if(未?) then (Y)
                            :"clear";
                            if(clear成功) then (Y)
                            else (N)
                                  #HotPink:goto while(1);
                                  detach
                            endif
                      else (N)
                      endif
                      :重新;
                      if("检测成功?") then (N)
                      else (Y)
                            #HotPink:goto while(1);
                            detach
                      endif
                else (N)
                endif
                if("可忽略err?") then (N)
                      #8EE5EE:取消al;
                      :标志=0;
                      #0000FF:exit(0);
                      stop
                else (Y)
                endif
          endif
          :sleep(1);
          #HotPink:goto while(1);
@enduml

@startuml 组件图
 
package "组件1" {
    ["组件1.1"] - ["组件1.2"]
    ["组件1.2"] -> ["组件2.1"]
}
 
node "组件2" {
    ["组件2.1"] - ["组件2.2"]
    ["组件2.2"] --> [负载均衡服务器]
}
 
cloud {
    [负载均衡服务器] -> [逻辑服务器1]
    [负载均衡服务器] -> [逻辑服务器2]
    [负载均衡服务器] -> [逻辑服务器3]
}
 
database "MySql" {
    folder "This is my folder" {
        [Folder 3]
    }
 
    frame "Foo" {
        [Frame 4]
    }
}
 
[逻辑服务器1] --> [Folder 3]
[逻辑服务器2] --> [Frame 4]
[逻辑服务器3] --> [Frame 4]
 
@enduml

@startuml 状态机
 
scale 640 width
 
[*] --> NotShooting
 
state NotShooting {
    [*] --> Idle
    Idle --> Processing: SignalEvent
    Processing --> Idle: Finish
    Idle --> Configuring : EvConfig
    Configuring --> Idle : EvConfig
}
 
state Configuring {
    [*] --> NewValueSelection
    NewValueSelection --> NewValuePreview : EvNewValue
    NewValuePreview --> NewValueSelection : EvNewValueRejected
    NewValuePreview --> NewValueSelection : EvNewValueSaved
    state NewValuePreview {
        State1 -> State2
    }
}
 
@enduml

@startuml 用例图
 
left to right direction
actor 消费者
actor 销售员
rectangle 买单 {
消费者 -- (买单)
(买单) .> (付款) : include
(帮助) .> (买单) : extends
(买单) -- 销售员
}
 
@enduml

@startuml 时序图
 
title 时序图
 
== 鉴权阶段 ==
 
Alice -> Bob: 请求
Bob -> Alice: 应答
 
== 数据上传 ==
 
Alice -> Bob: 上传数据
note left: 这是显示在左边的备注
 
Bob --> Canny: 转交数据
... 不超过 5 秒钟 ...
Canny --> Bob: 状态返回
note right: 这是显示在右边的备注
 
Bob -> Alice: 状态返回
 
== 状态显示 ==
 
Alice -> Alice: 给自己发消息
 
@enduml

@startuml
class EventBus
{
 - UEventBus::Attach			向EventBus中注册事件对象
 - UEventBus::RegisterEvent		监听指定对象中的事件
 - UEventBus::NotifyEvent		事件广播
 - UEventBus::TriggerEvent		事件触发
}
note right: 事件的管理器，全局的

class EventGraph
note top
 为不同对象创建不同的EventGraph资源实现事件的定制
 基本上运行时会存在三类EventGraph
    1. 全局的EventGraph, 一个， 响应一些全局事件
    2. 地图的EventGraph, 一个, 不同地图定制不同的，响应地图事件(MissionStart, MisionComplete, etc..)
    3. 特定对象的EventGraph, 多个，Graph集，不同对象有自己的EventGraph定义
end note

EventBus o.. EventScheduler
EventScheduler o.. EventGraph
EventScheduler o.. Object
note right: 逻辑对象，事件的拥有者
EventGraph .. 事件定义
EventGraph .. 事件响应器
事件定义 <-> 事件响应器
note bottom: 每个响应器对应一个或多个事件，可以是Task 或者 Delegate
@enduml


@startuml
class FRoleAttrData
{
    + float Value       属性值
    + bool bPercent     是否是百分比
    + 其他属性数据
}

class FRoleAttrCollection
{
    TMap<ERoleAttr, FRoleAttrData> AttrDatas    属性集
}

package 角色身上的属性
{
    class URoleAttrRootContext
    {
        --属性操作接口--
        float GetAttribute(ERoleAttr AttrType, bool bEvaluate = true)
        void SetAttribute(ERoleAttr AttrType, float Value);
    }
    note left
         Character的成员变量
         所有属性的访问，同步 操作统一到这里
    end note

    class URoleAttrRootEvaluator
    {
        void LinkToAttrChain(URoleAttrEvaluator* AttrEval)
        void Evaluate(TMap<ERoleAttr, float>& OutAttrValues)
    }
    note bottom 
        属性计算
        这里链接附属属性的Evaluator进行属性的链式计算
    end note
}

package 其他的附属属性(装备buff等)
{
    class URoleAttrContext
    {

    }
    note top: 属性访问，操作, 同步接口

    class URoleAttrEvaluator
}

FRoleAttrCollection o-- FRoleAttrData

URoleAttrRootContext o-- FRoleAttrCollection
URoleAttrRootContext o-- URoleAttrRootEvaluator

URoleAttrContext o-- FRoleAttrCollection
URoleAttrContext o-- URoleAttrEvaluator

URoleAttrRootEvaluator o.. URoleAttrEvaluator

@enduml